deepdive {

  # #############
  # CONFIGURATION
  # #############
  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}  #"
    user: ${PGUSER}
    password: ${PGPASSWORD}
  }

  sampler.sampler_cmd: "util/sampler-dw-linux gibbs"
  sampler.sampler_args: "-l 300 -s 1 -i 300 -a 0.1 -d 0.99"

  # pipeline.relearn_from: "/lfs/madmax2/0/zifei/deepdive/out/2014-04-28T152335/"

  # ###########
  # CALIBRATION
  # ###########
  # calibration.holdout_fraction: 0.25

  # calibration.holdout_query: """
  #   INSERT INTO dd_graph_variables_holdout(variable_id) 
  #     SELECT id FROM publication_author;
  #    """

  # ##############
  # VARIABLES
  # ##############
  schema.variables {

  }

  # ###########
  # PIPELINES
  # ###########
  pipeline.run: "all"

  # All we need is just to run "bash preprocess/import... then run"
  pipeline.pipelines.all: [
    "ext_cand_2gram"
  ]


  # ##########
  # Extractors
  # ##########
  extraction.extractors {

    ext_cand_2gram {
      style: "plpy_extractor"
      input: """
        SELECT    lattice_id,
                  ARRAY_AGG(starts ORDER BY starts, ends)  AS starts,
                  ARRAY_AGG(ends   ORDER BY starts, ends)  AS ends,
                  ARRAY_AGG(word   ORDER BY starts, ends)  AS arr_feature,
                  ARRAY_AGG(candidate_id ORDER BY starts, ends) AS candidate_ids,
                  2 as gram_len
        FROM      candidate
        GROUP BY  lattice_id;
      """
      udf: ${APP_HOME}"/udf/ext_ngram.py"
      output_relation: "f_cand_2gram"
      before: ${APP_HOME}"/udf/before/clear_table.sh f_cand_2gram"
    }


  }

  # ###############
  # Inference Rules
  # ###############
  inference.factors {

  }

}

