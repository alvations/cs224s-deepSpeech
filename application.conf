deepdive {

  # #############
  # CONFIGURATION
  # #############
  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}  #"
    user: ${PGUSER}
    password: ${PGPASSWORD}
  }

  sampler.sampler_cmd: "util/sampler-dw-linux gibbs"
  sampler.sampler_args: "-l 300 -s 1 -i 300 -a 0.1 -d 0.99"

  # pipeline.relearn_from: "/lfs/madmax2/0/zifei/deepdive/out/2014-04-28T152335/"

  # ###########
  # CALIBRATION
  # ###########
  # calibration.holdout_fraction: 0.25

  # calibration.holdout_query: """
  #   INSERT INTO dd_graph_variables_holdout(variable_id) 
  #     SELECT id FROM publication_author;
  #    """

  # ##############
  # VARIABLES
  # ##############
  schema.variables {

  }

  # ###########
  # PIPELINES
  # ###########
  pipeline.run: "all"

  # All we need is just to run "bash preprocess/import... then run"
  pipeline.pipelines.all: [
    "ext_cand_2gram"
  ]


  # ##########
  # Extractors
  # ##########
  extraction.extractors {


    ext_supervision {
      style: "plpy_extractor"
      input: """
        SELECT    c.lattice_id AS lattice_id,
                  ARRAY_AGG(c.starts ORDER BY starts, ends)  AS starts,
                  ARRAY_AGG(c.ends   ORDER BY starts, ends)  AS ends,
                  ARRAY_AGG(c.word   ORDER BY starts, ends)  AS candidates,
                  ARRAY_AGG(c.candidate_id ORDER BY starts, ends) AS candidate_ids,
                  max(t.words) AS transcript
        FROM      candidate  c, 
                  transcript_array t
        WHERE     t.lattice_id = c.lattice_id
        GROUP BY  c.lattice_id;
      """
      udf: ${APP_HOME}"/udf/ext_supervision.py"
      output_relation: "candidate_label"
      before: ${APP_HOME}"/udf/before/clear_table.sh f_cand_2gram"
    }


    ext_cand_2gram {
      style: "plpy_extractor"
      input: """
        SELECT    lattice_id,
                  ARRAY_AGG(starts ORDER BY starts, ends)  AS starts,
                  ARRAY_AGG(ends   ORDER BY starts, ends)  AS ends,
                  ARRAY_AGG(word   ORDER BY starts, ends)  AS arr_feature,
                  ARRAY_AGG(candidate_id ORDER BY starts, ends) AS candidate_ids,
                  2 as gram_len
        FROM      candidate
        GROUP BY  lattice_id;
      """
      udf: ${APP_HOME}"/udf/ext_ngram.py"
      output_relation: "f_cand_2gram"
      before: ${APP_HOME}"/udf/before/clear_table.sh f_cand_2gram"
    }


  }

  # ###############
  # Inference Rules
  # ###############
  inference.factors {

    rule_cand_1gram {
      input_query: """
          SELECT  candidate.id as "candidate.id",
                  candidate.is_true as "candidate.is_true",
                  log(count)::int as logcount
          FROM    candidate,
                  google_1gram_reduced ggl
          WHERE   upper(word)         = upper(ggl.gram)
            AND   word not like '~SIL%'
            AND   word != '<s>'
            AND   word != '</s>'
          """
      function: "IsTrue(candidate.is_true)"
      weight: "?(logcount)"
    }
    rule_cand_1gram_nonexist {
      input_query: """
          SELECT  candidate.id as "candidate.id",
                  candidate.is_true as "candidate.is_true",
                  log(count)::int as logcount
          FROM    candidate
          WHERE   NOT EXISTS (
                  SELECT  * 
                  FROM    google_1gram_reduced ggl
                  WHERE   upper(ggl.gram) = upper(word)
                  AND   word not like '~SIL%'
                  AND   word != '<s>'
                  AND   word != '</s>'
            )          
          """
      function: "IsTrue(candidate.is_true)"
      weight: "?"
    }
    rule_cand_2gram {
      input_query: """
          SELECT  candidate.id as "candidate.id",
                  candidate.is_true as "candidate.is_true",
                  log(count)::int as logcount
          FROM    f_cand_2gram f, 
                  candidate,
                  google_2gram_reduced ggl
          WHERE   candidate.lattice_id    = f.lattice_id
            AND   candidate.candidate_id  = f.candidate_id
            AND   upper(ggl.gram)         = upper(f.ngram)
            AND   ngram not like '~SIL%'
            AND   ngram not like '<s>%'
            AND   ngram not like '%</s>'
          """
      function: "IsTrue(candidate.is_true)"
      weight: "?(logcount)"
    }

    rule_cand_2gram_nonexist {
      input_query: """
          SELECT  candidate.id as "candidate.id",
                  candidate.is_true as "candidate.is_true"
          FROM    f_cand_2gram f, 
                  candidate
          WHERE   candidate.lattice_id    = f.lattice_id
            AND   candidate.candidate_id  = f.candidate_id
            AND   NOT EXISTS (
                  SELECT  * 
                  FROM    google_2gram_reduced ggl
                  WHERE   upper(ggl.gram) = upper(f.ngram)
                  AND   ngram not like '~SIL%'
                  AND   ngram not like '<s>%'
                  AND   ngram not like '%</s>'
            )
          """
      function: "IsTrue(candidate.is_true)"
      weight: "?"
    }

    # "Confirm" feature
    rule_confirm {
      input_query: """
          SELECT  id as "candidate.id",
                  is_true as "candidate.is_true",
                  confirm as "confirm"
          FROM    candidate
          """
      function: "IsTrue(candidate.is_true)"
      weight: "?(confirm)"
    }

    # TODO "confirm" feature

    # TODO Handle silence!!!
  }

}

